// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/katsukiniwa/go-ent-mysql/product/ent/history"
	"github.com/katsukiniwa/go-ent-mysql/product/ent/predicate"
	"github.com/katsukiniwa/go-ent-mysql/product/ent/user"
)

// HistoryUpdate is the builder for updating History entities.
type HistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *HistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the HistoryUpdate builder.
func (hu *HistoryUpdate) Where(ps ...predicate.History) *HistoryUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetAmount sets the "amount" field.
func (hu *HistoryUpdate) SetAmount(i int) *HistoryUpdate {
	hu.mutation.ResetAmount()
	hu.mutation.SetAmount(i)
	return hu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableAmount(i *int) *HistoryUpdate {
	if i != nil {
		hu.SetAmount(*i)
	}
	return hu
}

// AddAmount adds i to the "amount" field.
func (hu *HistoryUpdate) AddAmount(i int) *HistoryUpdate {
	hu.mutation.AddAmount(i)
	return hu
}

// SetUserID sets the "user_id" field.
func (hu *HistoryUpdate) SetUserID(i int) *HistoryUpdate {
	hu.mutation.SetUserID(i)
	return hu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableUserID(i *int) *HistoryUpdate {
	if i != nil {
		hu.SetUserID(*i)
	}
	return hu
}

// ClearUserID clears the value of the "user_id" field.
func (hu *HistoryUpdate) ClearUserID() *HistoryUpdate {
	hu.mutation.ClearUserID()
	return hu
}

// SetUser sets the "user" edge to the User entity.
func (hu *HistoryUpdate) SetUser(u *User) *HistoryUpdate {
	return hu.SetUserID(u.ID)
}

// Mutation returns the HistoryMutation object of the builder.
func (hu *HistoryUpdate) Mutation() *HistoryMutation {
	return hu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (hu *HistoryUpdate) ClearUser() *HistoryUpdate {
	hu.mutation.ClearUser()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HistoryUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HistoryUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (hu *HistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HistoryUpdate {
	hu.modifiers = append(hu.modifiers, modifiers...)
	return hu
}

func (hu *HistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(history.Table, history.Columns, sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Amount(); ok {
		_spec.SetField(history.FieldAmount, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedAmount(); ok {
		_spec.AddField(history.FieldAmount, field.TypeInt, value)
	}
	if hu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.UserTable,
			Columns: []string{history.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.UserTable,
			Columns: []string{history.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(hu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HistoryUpdateOne is the builder for updating a single History entity.
type HistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *HistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAmount sets the "amount" field.
func (huo *HistoryUpdateOne) SetAmount(i int) *HistoryUpdateOne {
	huo.mutation.ResetAmount()
	huo.mutation.SetAmount(i)
	return huo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableAmount(i *int) *HistoryUpdateOne {
	if i != nil {
		huo.SetAmount(*i)
	}
	return huo
}

// AddAmount adds i to the "amount" field.
func (huo *HistoryUpdateOne) AddAmount(i int) *HistoryUpdateOne {
	huo.mutation.AddAmount(i)
	return huo
}

// SetUserID sets the "user_id" field.
func (huo *HistoryUpdateOne) SetUserID(i int) *HistoryUpdateOne {
	huo.mutation.SetUserID(i)
	return huo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableUserID(i *int) *HistoryUpdateOne {
	if i != nil {
		huo.SetUserID(*i)
	}
	return huo
}

// ClearUserID clears the value of the "user_id" field.
func (huo *HistoryUpdateOne) ClearUserID() *HistoryUpdateOne {
	huo.mutation.ClearUserID()
	return huo
}

// SetUser sets the "user" edge to the User entity.
func (huo *HistoryUpdateOne) SetUser(u *User) *HistoryUpdateOne {
	return huo.SetUserID(u.ID)
}

// Mutation returns the HistoryMutation object of the builder.
func (huo *HistoryUpdateOne) Mutation() *HistoryMutation {
	return huo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (huo *HistoryUpdateOne) ClearUser() *HistoryUpdateOne {
	huo.mutation.ClearUser()
	return huo
}

// Where appends a list predicates to the HistoryUpdate builder.
func (huo *HistoryUpdateOne) Where(ps ...predicate.History) *HistoryUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HistoryUpdateOne) Select(field string, fields ...string) *HistoryUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated History entity.
func (huo *HistoryUpdateOne) Save(ctx context.Context) (*History, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HistoryUpdateOne) SaveX(ctx context.Context) *History {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HistoryUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (huo *HistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HistoryUpdateOne {
	huo.modifiers = append(huo.modifiers, modifiers...)
	return huo
}

func (huo *HistoryUpdateOne) sqlSave(ctx context.Context) (_node *History, err error) {
	_spec := sqlgraph.NewUpdateSpec(history.Table, history.Columns, sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "History.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, history.FieldID)
		for _, f := range fields {
			if !history.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != history.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Amount(); ok {
		_spec.SetField(history.FieldAmount, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedAmount(); ok {
		_spec.AddField(history.FieldAmount, field.TypeInt, value)
	}
	if huo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.UserTable,
			Columns: []string{history.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.UserTable,
			Columns: []string{history.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(huo.modifiers...)
	_node = &History{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
