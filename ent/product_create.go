// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/katsukiniwa/kubernetes-sandbox/product/ent/product"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStock sets the "stock" field.
func (pc *ProductCreate) SetStock(i int) *ProductCreate {
	pc.mutation.SetStock(i)
	return pc
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (pc *ProductCreate) SetNillableStock(i *int) *ProductCreate {
	if i != nil {
		pc.SetStock(*i)
	}
	return pc
}

// SetTitle sets the "title" field.
func (pc *ProductCreate) SetTitle(s string) *ProductCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pc *ProductCreate) SetNillableTitle(s *string) *ProductCreate {
	if s != nil {
		pc.SetTitle(*s)
	}
	return pc
}

// SetSaleStatus sets the "sale_status" field.
func (pc *ProductCreate) SetSaleStatus(ps product.SaleStatus) *ProductCreate {
	pc.mutation.SetSaleStatus(ps)
	return pc
}

// SetNillableSaleStatus sets the "sale_status" field if the given value is not nil.
func (pc *ProductCreate) SetNillableSaleStatus(ps *product.SaleStatus) *ProductCreate {
	if ps != nil {
		pc.SetSaleStatus(*ps)
	}
	return pc
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.Stock(); !ok {
		v := product.DefaultStock
		pc.mutation.SetStock(v)
	}
	if _, ok := pc.mutation.Title(); !ok {
		v := product.DefaultTitle
		pc.mutation.SetTitle(v)
	}
	if _, ok := pc.mutation.SaleStatus(); !ok {
		v := product.DefaultSaleStatus
		pc.mutation.SetSaleStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.Stock(); !ok {
		return &ValidationError{Name: "stock", err: errors.New(`ent: missing required field "Product.stock"`)}
	}
	if v, ok := pc.mutation.Stock(); ok {
		if err := product.StockValidator(v); err != nil {
			return &ValidationError{Name: "stock", err: fmt.Errorf(`ent: validator failed for field "Product.stock": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Product.title"`)}
	}
	if _, ok := pc.mutation.SaleStatus(); !ok {
		return &ValidationError{Name: "sale_status", err: errors.New(`ent: missing required field "Product.sale_status"`)}
	}
	if v, ok := pc.mutation.SaleStatus(); ok {
		if err := product.SaleStatusValidator(v); err != nil {
			return &ValidationError{Name: "sale_status", err: fmt.Errorf(`ent: validator failed for field "Product.sale_status": %w`, err)}
		}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.Stock(); ok {
		_spec.SetField(product.FieldStock, field.TypeInt, value)
		_node.Stock = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(product.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.SaleStatus(); ok {
		_spec.SetField(product.FieldSaleStatus, field.TypeEnum, value)
		_node.SaleStatus = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.Create().
//		SetStock(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetStock(v+v).
//		}).
//		Exec(ctx)
func (pc *ProductCreate) OnConflict(opts ...sql.ConflictOption) *ProductUpsertOne {
	pc.conflict = opts
	return &ProductUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProductCreate) OnConflictColumns(columns ...string) *ProductUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertOne{
		create: pc,
	}
}

type (
	// ProductUpsertOne is the builder for "upsert"-ing
	//  one Product node.
	ProductUpsertOne struct {
		create *ProductCreate
	}

	// ProductUpsert is the "OnConflict" setter.
	ProductUpsert struct {
		*sql.UpdateSet
	}
)

// SetStock sets the "stock" field.
func (u *ProductUpsert) SetStock(v int) *ProductUpsert {
	u.Set(product.FieldStock, v)
	return u
}

// UpdateStock sets the "stock" field to the value that was provided on create.
func (u *ProductUpsert) UpdateStock() *ProductUpsert {
	u.SetExcluded(product.FieldStock)
	return u
}

// AddStock adds v to the "stock" field.
func (u *ProductUpsert) AddStock(v int) *ProductUpsert {
	u.Add(product.FieldStock, v)
	return u
}

// SetTitle sets the "title" field.
func (u *ProductUpsert) SetTitle(v string) *ProductUpsert {
	u.Set(product.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ProductUpsert) UpdateTitle() *ProductUpsert {
	u.SetExcluded(product.FieldTitle)
	return u
}

// SetSaleStatus sets the "sale_status" field.
func (u *ProductUpsert) SetSaleStatus(v product.SaleStatus) *ProductUpsert {
	u.Set(product.FieldSaleStatus, v)
	return u
}

// UpdateSaleStatus sets the "sale_status" field to the value that was provided on create.
func (u *ProductUpsert) UpdateSaleStatus() *ProductUpsert {
	u.SetExcluded(product.FieldSaleStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProductUpsertOne) UpdateNewValues() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductUpsertOne) Ignore() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertOne) DoNothing() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreate.OnConflict
// documentation for more info.
func (u *ProductUpsertOne) Update(set func(*ProductUpsert)) *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetStock sets the "stock" field.
func (u *ProductUpsertOne) SetStock(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetStock(v)
	})
}

// AddStock adds v to the "stock" field.
func (u *ProductUpsertOne) AddStock(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddStock(v)
	})
}

// UpdateStock sets the "stock" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateStock() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateStock()
	})
}

// SetTitle sets the "title" field.
func (u *ProductUpsertOne) SetTitle(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateTitle() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateTitle()
	})
}

// SetSaleStatus sets the "sale_status" field.
func (u *ProductUpsertOne) SetSaleStatus(v product.SaleStatus) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetSaleStatus(v)
	})
}

// UpdateSaleStatus sets the "sale_status" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateSaleStatus() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSaleStatus()
	})
}

// Exec executes the query.
func (u *ProductUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	err      error
	builders []*ProductCreate
	conflict []sql.ConflictOption
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetStock(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductUpsertBulk {
	pcb.conflict = opts
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflictColumns(columns ...string) *ProductUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// ProductUpsertBulk is the builder for "upsert"-ing
// a bulk of Product nodes.
type ProductUpsertBulk struct {
	create *ProductCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProductUpsertBulk) UpdateNewValues() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductUpsertBulk) Ignore() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertBulk) DoNothing() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreateBulk.OnConflict
// documentation for more info.
func (u *ProductUpsertBulk) Update(set func(*ProductUpsert)) *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetStock sets the "stock" field.
func (u *ProductUpsertBulk) SetStock(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetStock(v)
	})
}

// AddStock adds v to the "stock" field.
func (u *ProductUpsertBulk) AddStock(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddStock(v)
	})
}

// UpdateStock sets the "stock" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateStock() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateStock()
	})
}

// SetTitle sets the "title" field.
func (u *ProductUpsertBulk) SetTitle(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateTitle() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateTitle()
	})
}

// SetSaleStatus sets the "sale_status" field.
func (u *ProductUpsertBulk) SetSaleStatus(v product.SaleStatus) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetSaleStatus(v)
	})
}

// UpdateSaleStatus sets the "sale_status" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateSaleStatus() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSaleStatus()
	})
}

// Exec executes the query.
func (u *ProductUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProductCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
