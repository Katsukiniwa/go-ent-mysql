// Code generated by ent, DO NOT EDIT.

package product

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStock holds the string denoting the stock field in the database.
	FieldStock = "stock"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSaleStatus holds the string denoting the sale_status field in the database.
	FieldSaleStatus = "sale_status"
	// Table holds the table name of the product in the database.
	Table = "products"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldStock,
	FieldTitle,
	FieldSaleStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStock holds the default value on creation for the "stock" field.
	DefaultStock int
	// StockValidator is a validator for the "stock" field. It is called by the builders before save.
	StockValidator func(int) error
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
)

// SaleStatus defines the type for the "sale_status" enum field.
type SaleStatus string

// SaleStatus1 is the default value of the SaleStatus enum.
const DefaultSaleStatus = SaleStatus1

// SaleStatus values.
const (
	SaleStatus0 SaleStatus = "0"
	SaleStatus1 SaleStatus = "1"
)

func (ss SaleStatus) String() string {
	return string(ss)
}

// SaleStatusValidator is a validator for the "sale_status" field enum values. It is called by the builders before save.
func SaleStatusValidator(ss SaleStatus) error {
	switch ss {
	case SaleStatus0, SaleStatus1:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for sale_status field: %q", ss)
	}
}

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStock orders the results by the stock field.
func ByStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStock, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySaleStatus orders the results by the sale_status field.
func BySaleStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSaleStatus, opts...).ToFunc()
}
